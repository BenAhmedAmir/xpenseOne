openapi: "3.0.0"
info:
  version: 1.0.0
  title: Xpense web api
  description: Xpense web api.
servers:
  - url: http://localhost:7000/api
  - url: https://dev.api.xpense.bulldozerinc.com/api
paths:
  /profile:
    get:
      summary: Get user profile from Auth0
      tags: 
        -  Profile
      operationId: getProfile
      responses:
        '200':
          description: Current user Profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update user profile
      tags:
        - Profile
      operationId: updateProfile
      requestBody:
        description: Update profile body request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfile'
      responses:
        '200':
          description: Update user Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /org:
    get:
      summary: Get user organizations
      tags: 
        - Organization
      operationId: getOrganizations
      responses:
        '200':
          description: Current user organizations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organizations"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'

  /org/{orgId}:
    get:
      summary: get organization by ID
      tags:
        - Organization
      operationId: getOrganization
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Current user organizations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      summary: Update organization
      tags:
        - Organization
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          required: true
      operationId: updateOrganization
      requestBody:
        description: Update organization body request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganization'
      responses:
        '204':
          description: Organization updated.
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /org/{orgId}/sheets:
    get:
      summary: Get user organization sheets
      tags: 
        - Organization
      operationId: getSheets
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Current user organization sheets
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sheet"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
  /org/{orgId}/groups:
    get:
      summary: Get groups by org
      tags:
        - Organization
        - Group
      operationId: groupsList
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Group created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Groups"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create new group
      tags:
        - Organization
        - Group
      operationId: createGroup
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          required: true
      requestBody:
        description: Group DTO object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroup'
      responses:
        '201':
          description: Group created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /org/{orgId}/groups/{groupId}:
    get:
      summary: get group by id
      tags:
        - Organization
        - Group
      operationId: getGroupById
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          required: true
        - in: path
          name: groupId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Get group by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update group
      tags:
        - Organization
        - Group
      operationId: updateGroup
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          required: true
        - in: path
          name: groupId
          schema:
            type: string
          required: true
      requestBody:
        description: Group DTO object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroup'
      responses:
        '204':
          description: Role successfully updated.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: delete group
      tags:
        - Organization
        - Group
      operationId: deleteGroup
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          required: true
        - in: path
          name: groupId
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Role successfully updated.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
  /org/{orgId}/groups/{groupId}/members:
    patch:
      summary: Assign user to a group
      tags:
        - Organization
        - Group
      operationId: assingUserToGroup
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          required: true
        - in: path
          name: groupId
          schema:
            type: string
          required: true
      requestBody:
        description: User ID
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses:
        '204':
          description: User successfully assigned to the group.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /org/{orgId}/groups/{groupId}/members/{userId}:
    delete:
      summary: Remove user from group
      tags:
        - Organization
        - Group
      operationId: removeUserFromGroup
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          required: true
        - in: path
          name: groupId
          schema:
            type: string
          required: true
        - in: path
          name: userId
          schema:
            type: string
          required: true
      responses:
        '204':
          description: User successfully removed from the group.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /org/{orgId}/groups/{groupId}/expense-types:
    patch:
      summary: Assign expense types to a group
      tags:
        - Organization
        - Group
      operationId: assingExpenseTypesToGroup
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          required: true
        - in: path
          name: groupId
          schema:
            type: string
          required: true
      requestBody:
        description: Expense types IDS
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                expenseTypes:
                  type: array
                  items:
                    type: string
      responses:
        '204':
          description: Expense types successfully assigned to the group.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /currencies:
    get:
      summary: Get list of currencies
      tags:
        - resources
      operationId: getCurrencies
      parameters:
        - in: query
          name: code
          schema:
            type: string
          required: false
      responses:
        '200':
          description: List of currencies supported by the organization
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Currencies"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /users:
    get:
      summary: List of filtered users by organization
      tags:
        - Users
      operationId: usersBYorganization
      parameters:
        - in: query
          name: orgId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: List of filtered users by organization
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/Users"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /users/{userId}:
    patch:
      summary: Change user role
      tags:
        - Users
      operationId:  changeUserRole
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
      requestBody:
        description: Role ID
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roleId:
                  type: string
      responses:
        '204':
          description: Role successfully associated with user.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /users/{userId}/org/{orgId}:
    patch:
      summary: Remove a user from an orgnization
      tags:
        - Users
      operationId: removeUserFromOrg
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
        - in: path
          name: orgId
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Role successfully associated with user.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /roles:
    get:
      summary: List of roles filtred by name
      tags:
        - Users
      operationId: getRoles
      parameters:
          - in: query
            name: name
            schema:
              type: string
            required: false
      responses:
        '200':
          description: List of roles
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Roles"
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /org/{orgId}/exp-types:
    get:
      summary: Get list of expense types
      tags:
        - Expense types
        - Organization
      operationId: getExpenseTypes
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: List of expense types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpenseTypes"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
  /org/{orgId}/exp-types/{expenseTypeId}:
    get:
      summary: Get expense type by id
      tags:
        - Expense types
        - Organization
      operationId: getExpenseType
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          required: true
        - in: path
          name: expenseTypeId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Expense type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpenseType"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /org/{orgId}/taxes:
    get:
      summary: Get list of taxes
      tags:
        - Taxes
        - Organization
      operationId: getTaxes
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: List of taxes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Taxes"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /sheets/{sheetId}/expenses:
    get:
      summary: Get expenses by sheet
      tags: 
        - Expenses
      operationId: getExpenses
      parameters:
        - in: path
          name: sheetId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Expenses list by sheet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Expenses"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /sheets/{sheetId}/expenses/{expenseId}:
    get:
      summary: Get expense by id
      tags: 
        - Expenses
      operationId: getExpense
      parameters:
        - in: path
          name: sheetId
          schema:
            type: string
          required: true
        - in: path
          name: expenseId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Expense
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Expense"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update expense
      tags:
        - Expenses
      parameters:
        - in: path
          name: sheetId
          schema:
            type: string
          required: true
        - in: path
          name: expenseId
          schema:
            type: string
          required: true
      operationId: updateExpense
      requestBody:
        description: Update expense body request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateExpense'
      responses:
        '204':
          description: Expense updated
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /upload/{type}/{typeId}:
    post:
      summary: Upload attachment file
      tags:
        - Upload attatchment
      operationId: uploadAttachment
      parameters:
        - in: path
          name: type
          schema:
            type: string
            enum: ["exp"]
        - in: path
          name: typeId
          schema:
            type: string
      requestBody:
        description: Upload attatchment file
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Upload'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Profile:
      $ref: './schemas/profile.yaml#/Profile'
    UpdateProfile:
      $ref: './schemas/profile.yaml#/UpdateProfile'
    Organization:
      $ref: './schemas/organization.yaml#/Organization'
    Organizations:
      $ref: './schemas/organization.yaml#/Organizations'
    UpdateOrganization:
      $ref: './schemas/organization.yaml#/UpdateOrganization'
    Sheet:
      $ref: './schemas/organization.yaml#/Sheet'
    Currencies:
      $ref: './schemas/resources.yaml#/Currencies'
    Users:
      $ref: './schemas/profile.yaml#/Users'
    Roles:
      $ref: './schemas/profile.yaml#/Roles'
    Group:
      $ref: './schemas/group.yaml#/Group'
    Groups:
      $ref: './schemas/group.yaml#/Groups'
    CreateGroup:
      $ref: './schemas/group.yaml#/CreateGroup'
    Expense:
      $ref: './schemas/expense.yaml#/Expense'
    Expenses:
      $ref: './schemas/expense.yaml#/Expenses'
    UpdateExpense:
      $ref: './schemas/expense.yaml#/UpdateExpense'
    ExpenseTypes:
      $ref: './schemas/expense-type.yaml#/ExpenseTypes'
    ExpenseType:
      $ref: './schemas/expense-type.yaml#/ExpenseType'
    Taxes:
      $ref: './schemas/tax.yaml#/Taxes'
    Upload:
      $ref: './schemas/upload.yaml#/Upload'
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    NotFound:
      description: The specified resource was not found
    BadRequest:
      description: Bad request
security:
  - bearerAuth: []